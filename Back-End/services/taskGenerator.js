const { GoogleGenerativeAI } = require('@google/generative-ai');

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' }); // Niveau gratuit

async function generateTasks(projectDescription, students, keyFeatures = []) {
    const tasks = [];
    const usedDescriptions = new Set();
    const usedNames = new Set();

    const validDescription = (projectDescription && typeof projectDescription === 'string' && projectDescription.length >= 10)
        ? projectDescription
        : "D√©veloppement d'une plateforme de gestion avec diverses fonctionnalit√©s.";
    const enrichedDescription = `${validDescription}${keyFeatures.length ? `. Caract√©ristiques cl√©s : ${keyFeatures.join(', ')}.` : '.'}`;

    console.log(`üîπ G√©n√©ration de ${students.length} t√¢ches`);
    console.log(`üîπ Description utilis√©e : "${enrichedDescription}"`);
    console.log(`üîπ √âtudiants re√ßus :`, students.map(s => s._id.toString()));

    for (let i = 0; i < students.length; i++) {
        const student = students[i];
        const studentName = student.name || `√âtudiant ${student._id}`;

        // Prompt am√©lior√© avec consigne d'unicit√©
        const prompt = `Projet : "${enrichedDescription}". G√©n√®re une t√¢che unique pour ${studentName} au format exact : "Nom: [nom], Description: [description], Priorit√©: [High/Medium/Low]". Utilise ${keyFeatures.join(', ') || 'des √©l√©ments g√©n√©raux'} pour personnaliser la t√¢che. La t√¢che doit √™tre diff√©rente de celles-ci : ${tasks.map(t => `"${t.name}: ${t.description}"`).join(', ') || 'aucune t√¢che pr√©c√©dente'}. Ne r√©p√®te pas les id√©es d√©j√† utilis√©es.`;

        console.log(`üîπ Prompt envoy√© pour ${studentName}:`, prompt);

        const result = await model.generateContent(prompt);
        const generatedText = result.response.text().trim();

        console.log(`üîπ Texte g√©n√©r√© pour ${studentName}:`, generatedText);

        const taskMatch = generatedText.match(/Nom:\s*([^[\]]+?),\s*Description:\s*([^[\]]+?),\s*Priorit√©:\s*(High|Medium|Low)/i);
        if (!taskMatch || taskMatch[1].includes('[nom') || taskMatch[2].includes('[description')) {
            throw new Error(`Format invalide ou placeholders d√©tect√©s : ${generatedText}`);
        }

        const [, name, description, priority] = taskMatch;
        let finalName = name.trim();
        let finalDescription = description.trim();

        if (finalDescription.length < 15) {
            throw new Error(`Description trop courte : ${finalDescription}`);
        }

        // V√©rification stricte pour √©viter les descriptions similaires
        const isTooSimilar = Array.from(usedDescriptions).some(used => {
            const similarity = finalDescription.toLowerCase().includes(used.toLowerCase().slice(0, 30));
            return similarity;
        });
        if (isTooSimilar) {
            throw new Error(`Description trop similaire √† une t√¢che pr√©c√©dente : ${finalDescription}`);
        }

        if (usedDescriptions.has(finalDescription)) {
            finalDescription += ` (${studentName})`;
        }
        if (usedNames.has(finalName)) {
            finalName += ` ${i + 1}`;
        }

        const task = {
            name: finalName.substring(0, 50),
            description: finalDescription,
            priority: priority.trim(),
            √©tat: 'To Do'
        };

        tasks.push(task);
        usedNames.add(finalName);
        usedDescriptions.add(finalDescription);
        console.log(`üîπ T√¢che ajout√©e pour ${studentName}:`, JSON.stringify(task, null, 2));
    }

    console.log(`üîπ Total t√¢ches g√©n√©r√©es : ${tasks.length}`);
    return tasks;
}

module.exports = { generateTasks };